{"pageProps":{"post":{"summary":null,"tags":["Linux"],"id":"linux-profiling-debug-tool-command","contentHtml":"<p>此篇记录一下工作中常用的Linux分析、定位、工具命令。</p>\n<h1>日志</h1>\n<h2>记录很多信息，系统有问题时的必查文件</h2>\n<blockquote>\n<p>/var/log/messages</p>\n</blockquote>\n<h1>Top</h1>\n<p>top 命令中关于程序使用内存的项介绍：</p>\n<pre><code class=\"language-shell\">%MEM：Memory usage (RES) 内存占用 使用的物理内存\nVIRT：Virtual Image (kb) 虚拟镜像 总虚拟内存的使用数量\nSWAP：Swapped size (kb) 非驻留但是存在于程序中的内存，虚拟内存减去物理内存\nRES：Resident size (kb) 非 swap 的物理内存\nSHR：Shared Mem size (kb) 程序使用的共享内存，可以被其它进程所共享\n</code></pre>\n<h1>系统类</h1>\n<pre><code>CPU总核数 = 物理CPU个数 * 每颗物理CPU的核数\n总逻辑CPU数 = 物理CPU个数 * 每颗物理CPU的核数 * 超线程数\n</code></pre>\n<h3>查看CPU信息（型号）</h3>\n<blockquote>\n<p>cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</p>\n</blockquote>\n<h3>查看物理CPU个数</h3>\n<blockquote>\n<p>cat /proc/cpuinfo| grep \"physical id\"| sort| uniq| wc -l</p>\n</blockquote>\n<h3>查看每个物理CPU中core的个数（即核数）</h3>\n<blockquote>\n<p>cat /proc/cpuinfo| grep \"cpu cores\"| uniq</p>\n</blockquote>\n<h3>查看逻辑CPU的个数</h3>\n<blockquote>\n<p>cat /proc/cpuinfo| grep \"processor\"| wc -l</p>\n</blockquote>\n<h3>查看服务器IP连接数</h3>\n<blockquote>\n<p>netstat -tun | awk '{print $5}' | cut -d : -f1 | sort | uniq -c | sort -n</p>\n</blockquote>\n<h3>查看是否有僵死进程</h3>\n<p>lsof | grep deleted</p>\n<h1>查找文件</h1>\n<p>命令 | 作用 | 说明\n--- | --- | ---\nwhich | 查看可执行文件的位置 | 通过 PATH 环境变量到该路径内查找可执行文件\nwhereis | 查看文件的位置 | 只能查二进制文件（含可执行文件）、说明文档，源文件等，可能有延迟\nlocate | 配合文件数据库查看文件位置 | 在数据库里查找，数据库大致每天更新一次，文件名是部分匹配\nfind | 实际搜寻硬盘来查询文件名称 | 最强大，根据条件查找文件，在硬盘上查找效率较低</p>\n<h2>查找当前路径下大于1M的文件</h2>\n<blockquote>\n<p>find . -size +1M</p>\n</blockquote>\n<h2>查找当前目录下5天之内修改且以conf结尾的文件</h2>\n<blockquote>\n<p>find . -mtime -5 -name '*.conf'</p>\n</blockquote>\n<h1>统计类</h1>\n<h2>awk</h2>\n<p>求和</p>\n<blockquote>\n<p>awk 'BEGIN{sum=0}{sum+=$1}END{print sum}' num.txt</p>\n</blockquote>\n<h2>grep</h2>\n<blockquote>\n<p>grep 'keywords' data.txt\ngrep -C5 'keywords' data.txt                  // 显示keywords的所在行及前后5行的信息\ngrep -A5 'keywords' data.txt                  // 显示keywords的所在行及之后5行的信息\ngrep -B5 'keywords' data.txt                  // 显示keywords的所在行及之前5行的信息</p>\n</blockquote>\n<h2>iostat</h2>\n<p>监控磁盘IO</p>\n<blockquote>\n<p>iostat 1</p>\n</blockquote>\n<h1>网络/磁盘IO</h1>\n<p>网络IO：数据通过以太网接口进行读写时也会造成阻塞，阻塞情况跟网络带宽有关。</p>\n<h2>netstat</h2>\n<p>查看网络状态</p>\n<blockquote>\n<p>netstat -an | grep 8080</p>\n</blockquote>\n<p>查看特定的几种网络连接状态</p>\n<blockquote>\n<p>netstat -lna | egrep \"TIME_WAIT | CLOSE_WAIT | ESTABLISHED\"</p>\n</blockquote>\n<h1>文件处理</h1>\n<h2>uniq</h2>\n<p>使用uniq求文件的交集、并集和差集</p>\n<ol>\n<li>交集</li>\n</ol>\n<pre><code class=\"language-txt\">sort a.txt b.txt | uniq -d\nsort后面的参数，如 -n 表示按照数字格式排序，如 -i 表示忽略大小写，如-r 表示为逆序输出。\nuniq为删除文件中重复的行，得到文件中唯一的行，参数 -d 表示的是输出出现次数大于1的内容，参数-u表示的是输出出现次数为1的内容。\n</code></pre>\n<ol start=\"2\">\n<li>并集</li>\n</ol>\n<pre><code class=\"language-txt\">sort a.txt b.txt | uniq\n</code></pre>\n<ol start=\"3\">\n<li>差集</li>\n</ol>\n<pre><code class=\"language-txt\">a.txt-b.txt:\nsort a.txt b.txt b.txt | uniq -u\n\n将两个文件排序，最后输出a.txt b.txt b.txt文件中只出现过一次的内容，因为有两个b.txt，所以只会输出只在a.txt出现过一次的内容，即a.txt-b.txt差集。对于b.txt-a.txt同理。\n\nb.txt - a.txt:\nsort b.txt a.txt a.txt | uniq -u\n</code></pre>\n<h2>磁盘信息</h2>\n<blockquote>\n<p>df -lh</p>\n</blockquote>\n<h3>curl</h3>\n<blockquote>\n<p>curl -o /dev/null -s -w \" http_code:%{http_code}\\n time_namelookup:%{time_namelookup}\\n time_redirect:%{time_redirect}\\n time_pretransfer:%{time_pretransfer}\\n time_connect:%{time_connect}\\n time_starttransfer:%{time_starttransfer}\\n time_total:%{time_total}\\n speed_download:%{speed_download}\\n \" \"https://www.baidu.com\"</p>\n</blockquote>\n<h4>curl输出</h4>\n<pre><code>\n http_code:200\n time_namelookup:0.014694       //DNS解析时间,从请求开始到DNS解析完毕所用时间。\n time_redirect:0.000000         //重定向时间，包括到最后一次传输前的几次重定向的DNS解析，连接，预传输，传输时间。\n time_pretransfer:0.049093      //从开始到准备传输的时间。\n time_connect:0.020436          //连接时间,从开始到建立TCP连接完成所用时间,包括前边DNS解析时间，如果需要单纯的得到连接时间，用这个time_connect时间减去前边time_namelookup时间。\n time_starttransfer:0.056731    //开始传输时间。在发出请求之后，Web 服务器返回数据的第一个字节所用的时间。\n time_total:0.056884            //总时间，按秒计。精确到小数点后三位。\n speed_download:43625.000\n\n 另外，如有：\n time_appconnect        //连接建立完成时间，如SSL/SSH等建立连接或者完成三次握手时间。\n</code></pre>\n<h2>lsof</h2>\n<p>列出打开的文件及相应的进程（list open files）</p>\n<blockquote>\n<p>lsof  -i:8080</p>\n</blockquote>\n<h1>进程/调用</h1>\n<h2>strace</h2>\n<p>使用 strace 跟踪用户进程和 Linux 内核之间的交互</p>\n<h1>测试</h1>\n<h2>ab</h2>\n<p>Apache Benchmarking tool，一个简易的压力测试工具命令。</p>\n<blockquote>\n<p>ab  -c 500  -t 10 -r  \"http://127.0.0.1:8080/\"</p>\n</blockquote>\n<p>参数释义如下：\n参数 | 含义\n--- | ---\nc | 并发量。默认是一次一个。\nt | 测试执行时间，单位为秒。默认没有时间限制。\nr | 即使遇到socket接收报错也不退出\nn | 请求的总数量。默认时，仅执行一个请求。\nk | 使用HTTP KeepAlive特性，即在一个HTTP会话中执行多个请求\np | 需要post的数据文件\nv | 显示详细信息\nV | 显示版本号并退出\ni | 执行HEAD请求，而不是GET\nw | 以html表格方式输出结果\nx | 设置属性的字符串\nX | 对请求使用代理服务器\nC | 对请求附加一个Cookie行\nH | 对请求附加额外的头信息\nT | POST数据所使用的Content-type 头信息</p>\n<p>使用ab进行post请求压测：</p>\n<blockquote>\n<p>ab -n 1000 -c 100 -p text.json http://127.0.0.1:8080</p>\n</blockquote>\n<pre><code>注意：在使用ab命令时，如果并发过高时出现错误：Too many open files，则说明系统打开文件数量被限制了。\n查看系统打开文件数量，使用命令：ulimit -a。\n修改打开文件数量，修改成102400，命令：ulimit -n 102400。\n查看修改后情况，使用命令：ulimit -n。\n</code></pre>\n<h2>httpstat</h2>\n<p>httpstat是一个外部工具，可以使用 brew install httpstat 单独安装。</p>\n<blockquote>\n<p>httpstat https://www.baidu.com</p>\n</blockquote>\n<pre><code>HTTP/1.1 200 OK\nAccept-Ranges: bytes\nCache-Control: private, no-cache, no-store, proxy-revalidate, no-transform\nConnection: keep-alive\nContent-Length: 2443\nContent-Type: text/html\nDate: Sun, 22 Dec 2009 11:15:09 GMT\nEtag: \"588603eb-98b\"\nLast-Modified: Mon, 23 Jan 2009 13:23:55 GMT\nPragma: no-cache\nServer: bfe/1.0.8.18\nSet-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/\n\nDNS Lookup   TCP Connection   TLS Handshake   Server Processing   Content Transfer\n[    117ms   |      10ms      |     32ms      |       20ms        |        1ms       ]\n             |                |               |                   |                  |\n    namelookup:117ms          |               |                   |                  |\n                        connect:127ms         |                   |                  |\n                                    pretransfer:159ms             |                  |\n                                                      starttransfer:179ms            |\n                                                                                 total:180ms\n</code></pre>\n<p>httpstat 作用类似如下：</p>\n<pre><code>curl -s -o /dev/null -w \"\\ntime_namelookup: %{time_namelookup}\\ntime_connect: %{time_connect}\\ntime_appconnect: %{time_appconnect}\\ntime_redirect: %{time_redirect}\\ntime_pretransfer: %{time_pretransfer}\\ntime_starttransfer: %{time_starttransfer}\\n-----------------------------\\ntime_total: %{time_total}\\n\" https://www.baidu.com\n</code></pre>\n","date":"2010-07-12T10:00:00.000Z","title":"Linux常用分析定位工具命令","published":true,"hideInList":false,"feature":null,"isTop":false},"prevPost":{"summary":null,"tags":["PHP"],"id":"php-fpm-status-path","title":"启用php-fpm的状态页","date":"2010-07-14T10:00:00.000Z","published":true,"hideInList":false,"feature":null,"isTop":false},"nextPost":{"summary":null,"tags":["操作系统"],"id":"virtualization-xen-kvm","title":"虚拟化Xen和KVM的区别","date":"2010-07-09T15:00:00.000Z","published":true,"hideInList":false,"feature":null,"isTop":false}},"__N_SSG":true}