{"pageProps":{"post":{"summary":null,"tags":["Golang"],"id":"go-defer","contentHtml":"<pre><code class=\"language-go\">// _defer结构体持有指向下一个要被执行的 defer 结构体的指针\ntype _defer struct {\n\tsiz     int32 // 包含参数和结果\n\tstarted bool\n\theap    bool\n\t// openDefer indicates that this _defer is for a frame with open-coded\n\t// defers. We have only one defer record for the entire frame (which may\n\t// currently have 0, 1, or more defers active).\n\topenDefer bool\n\tsp        uintptr  // 延迟调用时的sp\n\tpc        uintptr  // 延迟调用时的pc\n\tfn        *funcval // 下一个要被执行的延迟函数\n\t_panic    *_panic  // 执行延迟调用时的panic信息\n\tlink      *_defer\n\n\t// If openDefer is true, the fields below record values about the stack\n\t// frame and associated function that has the open-coded defer(s). sp\n\t// above will be the sp for the frame, and pc will be address of the\n\t// deferreturn call in the function.\n\tfd   unsafe.Pointer // funcdata for the function associated with the frame\n\tvarp uintptr        // value of varp for the stack frame\n\t// framepc is the current pc associated with the stack frame. Together,\n\t// with sp above (which is the sp associated with the stack frame),\n\t// framepc/sp can be used as pc/sp pair to continue a stack trace via\n\t// gentraceback().\n\tframepc uintptr\n}\n</code></pre>\n","date":"2018-09-07","title":"Go defer实现"},"prevPost":{"summary":null,"tags":["APP"],"id":"mobile-app-crossplatform-development","title":"移动端跨平台开发方案介绍","date":"2019-01-02"},"nextPost":{"summary":null,"tags":["Linux","大数据"],"id":"filebeat-intro","title":"Filebeat日志采集工具","date":"2018-09-05"}},"__N_SSG":true}