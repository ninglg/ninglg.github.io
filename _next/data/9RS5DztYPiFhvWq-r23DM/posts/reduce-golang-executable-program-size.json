{"pageProps":{"post":{"summary":null,"tags":["Golang"],"id":"reduce-golang-executable-program-size","contentHtml":"<p>Golang默认编译出来的可执行文件，一般都比较大。此处介绍一些可以减小可执行文件体积的方法。</p>\n<h2>Golang编译参数调整</h2>\n<blockquote>\n<p>go build -ldflags=\"-s -w\" main.go</p>\n</blockquote>\n<pre><code>-s：忽略符号表和调试信息\n-w：忽略DWARFv3调试信息，不生成debug信息，使用该选项后将导致无法使用gdb进行调试\n\n注：Go编译器生成的调试信息格式为DWARFv3，只要版本高于7.1的GDB都可以支持调试\n</code></pre>\n<blockquote>\n<p>go build -gcflags '-N -l'</p>\n</blockquote>\n<pre><code>-N 禁止编译优化\n-l 禁止内联，禁止内联也可以在一定程度上减小可执行程序大小\n</code></pre>\n<blockquote>\n<p>可以使用 go tool compile --help 查看 gcflags 各参数含义</p>\n</blockquote>\n<h2>UPX压缩</h2>\n<blockquote>\n<p><a href=\"https://github.com/upx/upx\">https://github.com/upx/upx</a></p>\n</blockquote>\n<p>upx是一个二进制压缩工具，可以用来压缩编译出来的二进制文件尺寸。</p>\n<pre><code>upx --brute bin\nupx --ultra-brute bin\n</code></pre>\n<p>可以使用不同的压缩参数，来进行不同程度的压缩。</p>\n","date":"2017-01-02T00:00:00.000Z","title":"减小Go代码编译后可执行程序的体积"},"prevPost":{"summary":null,"tags":["Golang"],"id":"golang-encoder-decoder","title":"Go语言的常用编解码器（序列化/反序列化）","date":"2017-01-20T00:00:00.000Z"},"nextPost":{"summary":null,"tags":["Golang"],"id":"protobuf-3","title":"Protobuf 3介绍","date":"2016-12-10T00:00:00.000Z"}},"__N_SSG":true}