{"pageProps":{"post":{"summary":null,"tags":["数据结构","算法"],"id":"linked-list-intro","contentHtml":"<h1>链表的结构定义</h1>\n<h2>单链表</h2>\n<pre><code class=\"language-go\">/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\n</code></pre>\n<h2>从尾到头打印链表</h2>\n<blockquote>\n<p>使用递归的方法</p>\n</blockquote>\n<pre><code class=\"language-go\">func reversePrint(head *ListNode) []int {\n   if head == nil {\n       return nil\n  }\n  \n   return appendData(head)\n}\n\nfunc appendData(head *ListNode) []int {\n   if head.Next != nil{\n       list := appendData(head.Next)\n       list = append(list, head.Val)\n       return list\n  }\n\n   return []int{head.Val}\n}\n</code></pre>\n<blockquote>\n<p>使用栈进行辅助的方法</p>\n</blockquote>\n<pre><code class=\"language-go\">import \"container/list\"\nfunc reversePrint(head *ListNode) []int {\n\tif head == nil {\n\t\treturn nil\n\t}\n\t\n\tres := list.New()\n\tfor head != nil {\n\t\tres.PushFront(head.Val)\n\t\thead = head.Next\n\t}\n\t\n\tret := []int{}\n\tfor e := res.Front(); e != nil; e = e.Next() {\n\t\tret = append(ret, e.Value.(int))\n\t}\n\t\n\treturn ret\n}\n</code></pre>\n<h2>反转单链表</h2>\n<pre><code class=\"language-go\">/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseList(head *ListNode) *ListNode {\n    if head == nil || head.Next == nil {\n        return head\n    }\n\n    var prev *ListNode\n    cur := head\n\n    for cur != nil {\n        cur.Next, prev, cur = prev, cur, cur.Next\n    }\n\n    return prev\n}\n</code></pre>\n<h2>合并两个有序链表</h2>\n<pre><code class=\"language-go\">/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    if list1 == nil {\n\t\treturn list2\n\t}\n    \n\tif list2 == nil {\n\t\treturn list1\n\t}\n    \n\tif list1.Val > list2.Val {\n\t\tlist2.Next = mergeTwoLists(list1, list2.Next)\n\t\treturn list2\n\t} else {\n\t\tlist1.Next = mergeTwoLists(list1.Next, list2)\n\t\treturn list1\n\t}\n}\n</code></pre>\n","date":"2011-03-07T00:00:00.000Z","title":"数据结构：链表"},"prevPost":{"summary":null,"tags":["Linux"],"id":"sed-command-usage","title":"sed命令使用","date":"2011-03-16T00:00:00.000Z"},"nextPost":{"summary":null,"tags":["网络"],"id":"check-ip-port-signal","title":"IP、端口和通信检查","date":"2011-03-02T00:00:00.000Z"}},"__N_SSG":true}