{"pageProps":{"post":{"summary":null,"tags":["Golang"],"id":"use-docker-to-deploy-golang-app","contentHtml":"<h1>1、go.mod 编写源码</h1>\n<p>首先编写Go程序代码，并使用go.mod进行依赖管理。\nGo示例代码：</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc myHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello world\\n\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", myHandler)\n\tlog.Fatal(http.ListenAndServe(\":8090\", nil))\n}\n</code></pre>\n<p>go.mod示例内容：</p>\n<pre><code class=\"language-txt\">module test\n\ngo 1.13\n</code></pre>\n<h1>2、Dockerfile 编写部署文件</h1>\n<p>编写打包部署所需要的Dockerfile文件。示例如下：</p>\n<pre><code class=\"language-go\">#因为golang镜像有点大，此处使用了大小体积只有5MB的alpine镜像\nFROM alpine:latest\n\n#维护者信息（非必须）\nMAINTAINER xxx \"yyy@zzz.com\"\n\n#设置当前工作路径\nWORKDIR /\n\n#把上文编译好的可执行文件添加到镜像里\nADD main /\n\n#暴露容器内部端口\nEXPOSE 8090\n\n#可执行程序入口\nENTRYPOINT [\"./main\"]\n</code></pre>\n<h1>3、docker build 构建镜像</h1>\n<p>先根据镜像实际运行平台(alpine)进行源码编译：</p>\n<blockquote>\n<p>env GOOS=linux GOARCH=386 go build main.go</p>\n</blockquote>\n<p>再打包编译结果：</p>\n<blockquote>\n<p>docker build -t main:v1 .</p>\n</blockquote>\n<h1>4、docker run 运行镜像</h1>\n<blockquote>\n<p>docker run --name docker-main -d -p 8090:8090 main:v1</p>\n</blockquote>\n","date":"2020-01-15T00:00:00.000Z","title":"使用Docker部署Go应用程序"},"prevPost":{"summary":null,"tags":["Kafka"],"id":"kafka-definitive-guide-note","title":"《Kafka权威指南》阅读笔记","date":"2020-01-20T00:00:00.000Z"},"nextPost":{"summary":null,"tags":["系统设计"],"id":"map-lbs-design","title":"基于Map LBS的服务设计","date":"2019-10-01T00:00:00.000Z"}},"__N_SSG":true}