{"pageProps":{"post":{"summary":null,"tags":["分布式系统"],"id":"distributed-locks","contentHtml":"<p>此篇介绍一下分布式锁的相关内容。</p>\n<p>当共享资源出现竞争时，为了防止出现并发问题，我们一般会采用锁机制来进行控制。在单机环境下，可以使用synchronized或Lock来实现；但是在分布式系统中，因为竞争的进程可能不在同一个节点上，所以需要一个让所有进程都能访问到的锁来实现，比如Redis、ZooKeeper等。</p>\n<h2>分布式锁</h2>\n<h3>1. 基于数据库，如MySQL的实现</h3>\n<h3>2. 基于缓存，如Redis的实现</h3>\n<p><a href=\"https://redis.io/topics/distlock\">Distributed locks with Redis</a></p>\n<h3>3. 基于ZooKeeper、etcd的实现</h3>\n<p>使用Zookeeper中的watch机制，当节点发生变化时，通知到监听者。</p>\n","date":"2017-07-26T11:17:36.000Z","title":"分布式锁","published":true,"hideInList":false,"feature":null,"isTop":false},"prevPost":{"summary":null,"tags":["Golang"],"id":"go-garbage-collection","title":"Go语言垃圾回收机制(GC)","date":"2017-07-28T10:59:35.000Z","published":true,"hideInList":false,"feature":null,"isTop":false},"nextPost":{"summary":null,"tags":["分布式系统"],"id":"distributed-transaction","title":"分布式事务","date":"2017-07-25T20:49:31.000Z","published":true,"hideInList":false,"feature":null,"isTop":false}},"__N_SSG":true}