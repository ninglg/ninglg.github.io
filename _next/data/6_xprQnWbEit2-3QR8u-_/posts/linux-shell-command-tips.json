{"pageProps":{"post":{"summary":null,"tags":["Linux"],"id":"linux-shell-command-tips","contentHtml":"<p>此篇介绍一下Shell命令相关的内容。</p>\n<h2>$0、$1、$2、$#、$@、$*、$?</h2>\n<p>首先介绍一下 $0、$1、$2、$#、$@、$*、$? 的含义。</p>\n<p>比如执行以下命令：</p>\n<blockquote>\n<p>/bin/test.sh a b c</p>\n</blockquote>\n<p>命令 | 含义 | 备注\n--- | --- | ---\n$0 | 表示文件路径和文件名 | /bin/test.sh\n$1、$2 | 表示第几个参数 | 如a、b，但如第10个要用${10}而非$10，$10相当于${1}0\n$# | 表示传入脚本的参数个数 | 此处为3，统计不包括$0\n$@ | 表示所有参数的列表 | 此处\"a\"、\"b\"、\"c\"，不包括$0\n$* | 表示所有的参数 | 其值和 $@ 相同，但区别在于 $* 把所有参数合并成一个字符串，而 $@ 会得到一个字符串参数数组\n$? | 表示执行脚本命令后的返回值 | 命令执行成功时默认返回0</p>\n<p>示例：</p>\n<pre><code class=\"language-shell\">#!/bin/sh\n\nfor x in \"$@\"; do\necho $x\ndone\n\nfor x in \"$*\"; do\necho $x\ndone\n</code></pre>\n<p>执行 /bin/test.sh a b c 后输出：</p>\n<pre><code>a\nb\nc\na b c\n</code></pre>\n<h2>&#x26; 和 wait</h2>\n<blockquote>\n<p>&#x26;  当要执行的命令以 &#x26; 结尾时，这个命令会在后台子 shell 执行\nwait  当有多个耗时操作可以并发执行，且这些操作都执行完成后，再进行下一步操作，就可以使用 wait 命令来等待这些操作执行完成</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"language-shell\">command1 &#x26;\ncommand2 &#x26;\nwait\n</code></pre>\n","date":"2011-01-05T10:00:00.000Z","title":"Linux Shell命令技巧","published":true,"hideInList":false,"feature":null,"isTop":false},"prevPost":{"summary":null,"tags":["开发工具"],"id":"chrome-browser-dev-tool","title":"Chrome浏览器开发者工具","date":"2011-01-07T10:00:00.000Z","published":true,"hideInList":false,"feature":null},"nextPost":{"summary":null,"tags":["网络"],"id":"mac-address-learning-intro","title":"Mac地址学习的概念","date":"2011-01-03T10:00:00.000Z","published":true,"hideInList":false,"feature":null}},"__N_SSG":true}