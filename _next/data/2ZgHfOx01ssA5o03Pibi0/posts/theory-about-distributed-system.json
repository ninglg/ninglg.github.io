{"pageProps":{"post":{"summary":null,"tags":["分布式系统"],"id":"theory-about-distributed-system","contentHtml":"<p>此篇介绍几个跟分布式系统有关的理论。</p>\n<!-- more -->\n<h2>FLP不可能原理</h2>\n<p><code>在网络可靠，存在节点失效（即便只有一个）的最小化异步模型系统中，不存在一个可以解决一致性问题的确定性算法。</code></p>\n<h2>CAP原理</h2>\n<p><code>一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容忍性（Partition tolerance）这三项中的两项。</code></p>\n<ol>\n<li>一致性（Consistence)\n对某个指定的客户端来说，读操作保证能够返回最新的写操作结果。</li>\n<li>可用性（Availability）\n非故障节点在合理的时间内返回合理的响应。</li>\n<li>分区容忍性（Partition Tolerance）\n当出现网络分区后，系统能够继续履行职责。</li>\n</ol>\n<blockquote>\n<p>在分布式环境下，必须选择 P。因为网络原因可能出现故障，所以分区是一个必然现象。因此，分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP。</p>\n</blockquote>\n<ul>\n<li>CAP理论说分布式系统中这3点无法同时满足，但一定不要理解错误了，不要认为我们在架构设计时，这个系统要么 CP 要么 AP。</li>\n<li>要记住：CAP 关注的粒度是数据，系统中会包含多种类型的数据，有的必须选择 CP，有的必须选择 AP。</li>\n</ul>\n<h2>BASE理论</h2>\n<p><code>BASE是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency）。</code></p>\n<ol>\n<li>基本可用（Basically Available）\n分布式系统在出现故障时，允许损失<strong>部分</strong>可用性，保证<strong>核心</strong>可用。</li>\n<li>软状态（Soft State）\n允许系统存在中间状态，该中间状态不会影响系统整体可用性。</li>\n<li>最终一致性（Eventual Consistency）\n系统中所有数据副本经过一定时间后，最终能够达到一致状态。</li>\n</ol>\n<p>BASE支持的是大型分布式系统，牺牲掉对一致性的约束（但实现最终一致性），来换取一定的可用性。</p>\n<h2>ACID原则</h2>\n<p>ACID原则指的是：</p>\n<blockquote>\n<p>Atomicity（原子性）\nConsistency（一致性）\nIsolation（隔离性）\nDurability（持久性）</p>\n</blockquote>\n<p>用了四种特性的缩写。</p>\n<p>ACID是传统数据库事务常用的设计理念，追求强一致性模型。</p>\n<h2>事务的隔离级别</h2>\n<ol>\n<li>读未提交（Read Uncommitted）：可能发生脏读、不可重复读、幻读</li>\n<li>读已提交（Read Committed）：可能发生不可重复读、幻读</li>\n<li>可重复读（Repeatable Read）：可能发生幻读</li>\n<li>串行化（Serializable）：所有事务都是串行执行</li>\n</ol>\n","date":"2017-07-31T19:24:05.000Z","title":"有关分布式系统的几个理论","published":true,"hideInList":false,"feature":null,"isTop":false},"prevPost":{"summary":null,"tags":["Golang"],"id":"golang-scheduler-machine-processor-goroutine-model","title":"Go语言调度器MPG模型","date":"2017-08-02T13:21:42.000Z","published":true,"hideInList":false,"feature":null,"isTop":false},"nextPost":{"summary":null,"tags":["Golang"],"id":"go-garbage-collection","title":"Go语言垃圾回收机制(GC)","date":"2017-07-28T10:59:35.000Z","published":true,"hideInList":false,"feature":null,"isTop":false}},"__N_SSG":true}