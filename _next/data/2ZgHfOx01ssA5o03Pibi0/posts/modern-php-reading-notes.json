{"pageProps":{"post":{"summary":null,"tags":["PHP"],"id":"modern-php-reading-notes","contentHtml":"<p>此篇记录一下阅读《Modern PHP》后的一些内容。</p>\n<!-- more -->\n<h2>第1章 新时代的PHP</h2>\n<ol>\n<li>命名空间、性状、闭包和内置的操作码缓存</li>\n<li>依赖管理程序Composer</li>\n<li>多个PHP引擎：Zend Engine 和 HHVM（Facebook开发的HipHop Virtual Machine）</li>\n<li>Hack语言是建立在PHP之上的编程语言，引入了静态类型、新的数据结构和额外的接口，同时还向后兼容现有的动态类型PHP代码</li>\n<li>HHVM是PHP和Hack的解释器，使用即时（Just In Time，JIT）编译器提升应用的性能，并减少内存用量</li>\n<li>Zend Engine核心团队开发的PHP7性能与HHVM相当</li>\n</ol>\n<h2>第2章 特性</h2>\n<ol>\n<li>命名空间</li>\n</ol>\n<pre><code class=\"language-php\">\n&#x3C;?php\nnamespace Company;\n</code></pre>\n<ol start=\"2\">\n<li>别名</li>\n</ol>\n<pre><code class=\"language-php\">\n&#x3C;?php\nuse Company\\Component\\Response as Res;\nuse func Namespace\\functionName;\nuse constant Namespace\\CONST_NAME;\n\nfunctionName();\necho CONST_NAME;\n</code></pre>\n<ol start=\"3\">\n<li>性状（Trait）</li>\n</ol>\n<pre><code class=\"language-php\">\n&#x3C;?php\ntrait MyTrait {\n\n}\n</code></pre>\n<pre><code class=\"language-php\">\n&#x3C;?php\nclass MyClass\n{\n    use MyTrait;\n}\n</code></pre>\n<ol start=\"4\">\n<li>生成器（generator）</li>\n</ol>\n<pre><code class=\"language-php\">\n&#x3C;?php\nfunction myGenerator() {\n    yield 'value1';\n    yield 'value2';\n    yield 'value3';\n}\n</code></pre>\n<ol start=\"5\">\n<li>闭包</li>\n</ol>\n<pre><code class=\"language-php\">\n&#x3C;?php\n$closure = function ($name) {\n    return sprintf('Hello %s', $name);\n};\n</code></pre>\n<ol start=\"6\">\n<li>Zend OPcache</li>\n<li>内置的HTTP服务器</li>\n</ol>\n<pre><code>\nphp -S localhost:4000\nphp -S localhost:8000 -c app/config/php.ini\n</code></pre>\n<p>判断使用的是否为内置的服务器</p>\n<pre><code>\n&#x3C;?php\nif (php_sapi_name() === 'cli-server') {\n    // PHP内置的Web服务器\n} else {\n    // 其他Web服务器\n}\n</code></pre>\n<h2>第3章 标准</h2>\n<ol>\n<li>PHP社区已从中心化的框架模型进化为分布式生态系统了</li>\n<li>PHP-FIG制定了推荐规范</li>\n<li>自动加载\n在PHP标准出现之前，PHP组件和框架使用魔术方法__autoload()或最新的spl_autoload_register()方法实现各自持有的自动加载器。如今，使用共同的一个自动加载器标准，就能混合搭配多个PHP组件。</li>\n<li>PSR</li>\n</ol>\n<ul>\n<li>PSR是PHP Standards Recommendation（PHP推荐标准）的简称</li>\n<li>PHP-FIG发布了PSR-0 ~ PSR-4共5个推荐规范，其中PSR-0已废弃</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标准</th>\n<th>规范</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PSR-0</td>\n<td>自动加载</td>\n<td>已经废弃</td>\n</tr>\n<tr>\n<td>PSR-1</td>\n<td>基本的代码风格</td>\n<td></td>\n</tr>\n<tr>\n<td>PSR-2</td>\n<td>严格的代码风格</td>\n<td></td>\n</tr>\n<tr>\n<td>PSR-3</td>\n<td>日志记录器接口</td>\n<td></td>\n</tr>\n<tr>\n<td>PSR-4</td>\n<td>自动加载</td>\n<td></td>\n</tr>\n<tr>\n<td>PSR-5</td>\n<td>PHPDoc标准</td>\n<td>草案阶段</td>\n</tr>\n<tr>\n<td>PSR-6</td>\n<td>Cache</td>\n<td>草案阶段</td>\n</tr>\n<tr>\n<td>PSR-7</td>\n<td>HTTP消息接口</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>第4章 组件</h2>\n<ol>\n<li>Packagist是查找组件的地方，Composer是安装PHP组件的工具</li>\n<li>Composer是PHP组件的依赖管理器</li>\n</ol>\n<pre><code>\ncomposer require vendor/package\n</code></pre>\n<ol start=\"3\">\n<li>composer.json文件和composer.lock文件</li>\n</ol>\n<h2>第5章 良好实践</h2>\n<ol>\n<li>不要相信任何来自不受自己直接控制的数据源中的数据</li>\n<li>哈希算法有很多种（例如MD5、SHA1、bcrypt和scrypt）</li>\n<li>目前，经同行审查，最安全的哈希算法是bcrypt。与MD5和SHA1不同，bcrypt是故意设计的很慢。bcrypt算法会自动加盐，防止潜在的彩虹表攻击。</li>\n<li>bcrypt算法永不过时，如果计算机的运算速度变快了，我们只需提高工作因子的值</li>\n<li>设置默认时区</li>\n</ol>\n<pre><code class=\"language-php\">\n&#x3C;?php\ndate_default_timezone_set('Asia/Shanghai');\n</code></pre>\n<ol start=\"6\">\n<li>数据库</li>\n</ol>\n<ul>\n<li>PDO扩展</li>\n<li>数据库连接和DSN</li>\n<li>事务：PDO扩展还支持事务</li>\n</ul>\n<h2>第6章 主机</h2>\n<ol>\n<li>共享服务器、虚拟私有服务器、专用服务器和平台即服务</li>\n</ol>\n<h2>第7章 配置</h2>\n<ol>\n<li>PHP-FPM（PHP FastCGI Process Manager）</li>\n<li>Nginx虚拟主机的设置在server{}块中</li>\n<li>大多数情况下，HTTP流量从80端口进入，HTTPS流量从443端口进入</li>\n</ol>\n<h2>第8章 调优</h2>\n<ol>\n<li>memory_get_peak_usage()</li>\n<li>print_r(realpath_cache_size())</li>\n</ol>\n<h2>第9章 部署</h2>\n<ol>\n<li>自动部署</li>\n<li>让部署的结果可预知</li>\n<li>让部署可逆</li>\n</ol>\n<h2>第10章 测试</h2>\n<ol>\n<li>单元测试</li>\n<li>功能测试</li>\n<li>测试驱动开发（Test-Driven Development，TDD）</li>\n<li>行为驱动开发（Behavior-Driven Development，BDD）</li>\n<li>单元测试框架：PHPUnit和PHPSpec</li>\n<li>使用Travis CI持续测试</li>\n</ol>\n<h2>第11章 分析</h2>\n<ol>\n<li>Xdebug</li>\n<li>XHProf + XHGUI</li>\n<li>Blackfire分析器</li>\n</ol>\n<h2>第12章 HHVM和Hack</h2>\n<ol>\n<li>使用Supervisord监控HHVM</li>\n<li>HHVM通过FastCGI协议与Web服务器（例如nginx）通信</li>\n<li>HHVM也可以运行Hack语言</li>\n<li>Hack语言添加了PHP中没有的新数据结构和接口</li>\n<li>若想把代码从PHP转到Hack，把&#x3C;?php改成&#x3C;?hh即可</li>\n</ol>\n<h2>第13章 社区</h2>\n<ol>\n<li>本地PHP用户组（PHP User Group，PUG）</li>\n</ol>\n<h2>附录A 安装PHP</h2>\n<ol>\n<li>wget、phploc、phpmd和php-code-sniffer</li>\n</ol>\n<h2>附录B 本地开发环境</h2>\n<ol>\n<li>VirtualBox</li>\n<li>Vagrant</li>\n</ol>\n","date":"2017-10-03T10:00:00.000Z","title":"《Modern PHP》阅读笔记","published":true,"hideInList":false,"feature":null,"isTop":false},"prevPost":{"summary":null,"tags":["微服务"],"id":"service-discovery-in-microservices","title":"微服务中的服务发现","date":"2017-10-18T17:28:15.000Z","published":true,"hideInList":false,"feature":null,"isTop":false},"nextPost":{"summary":null,"tags":["Golang"],"id":"the-go-programming-language","title":"《Go程序设计语言》阅读","date":"2017-10-02T10:00:00.000Z","published":true,"hideInList":false,"feature":null,"isTop":false}},"__N_SSG":true}