{"pageProps":{"post":{"summary":null,"tags":["Nginx"],"id":"nginx-load-balance","contentHtml":"<p>Nginx的负载均衡策略</p>\n<!-- more -->\n<h1>负载均衡使用upstream</h1>\n<p>负载均衡用于从“upstream”模块定义的后端服务器列表中选取一台服务器接受用户的请求。</p>\n<h1>upstream负载均衡分配策略</h1>\n<h2>（1）轮询</h2>\n<ol>\n<li>默认的均衡策略。</li>\n<li>每个请求会按时间顺序逐一分配到不同的后端服务器。</li>\n</ol>\n<h2>（2）weight</h2>\n<ol>\n<li>权重方式，在轮询策略的基础上指定轮询的几率。</li>\n</ol>\n<h2>（3）ip_hash</h2>\n<ol>\n<li>指定负载均衡器按照基于客户端IP的分配方式。</li>\n<li>这个方法确保了相同的客户端的请求一直发送到相同的服务器，以保证session会话。</li>\n<li>每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题。</li>\n</ol>\n<h2>（4）least_conn</h2>\n<ol>\n<li>把请求转发给连接数较少的后端服务器。</li>\n<li>此策略适合请求处理时间长短不一造成服务器过载的情况。</li>\n</ol>\n<h1>第三方插件实现的负载均衡策略</h1>\n<h2>（1）fair</h2>\n<ol>\n<li>按照服务器端的响应时间来分配请求，响应时间短的优先分配。</li>\n</ol>\n<h2>（2）url_hash</h2>\n<ol>\n<li>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用。</li>\n<li>同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高且可能造成资源时间的浪费。但是使用url_hash，可以使得同一个url（也就是同一个资源请求）到达同一台服务器，一旦缓存住了资源，再次收到请求，就可以从缓存中读取。</li>\n</ol>\n","date":"2013-07-26T00:00:00.000Z","title":"Nginx的负载均衡策略"},"prevPost":{"summary":null,"tags":["Redis"],"id":"redis-key-ttl-expire","title":"Redis Key的过期","date":"2013-10-21T00:00:00.000Z"},"nextPost":{"summary":null,"tags":["MySQL"],"id":"mysql-qps-tps-iops","title":"MySQL数据库的关键性能指标","date":"2013-06-03T00:00:00.000Z"}},"__N_SSG":true}