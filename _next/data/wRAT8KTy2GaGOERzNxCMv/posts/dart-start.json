{"pageProps":{"post":{"summary":null,"tags":["Flutter"],"id":"dart-start","contentHtml":"<h1>说明</h1>\n<ol>\n<li>Dart是Fuchsia操作系统的官方开发语言</li>\n<li>Dart是一门强类型语言，但同时仍然支持弱类型语言的某些特性</li>\n<li>Dart有自己的VM，可以像Java语言一样运行在虚拟机上，又可以被编译成Native Code直接运行在硬件上（比如Flutter）</li>\n<li>在Dart中，一切皆是对象，一切数据类型均继承自Object，即使是一个整数或方法，甚至null</li>\n<li>Dart可以推断变量的类型，除非开发者明确表示某个变量不被指定为任何一种类型。建议使用静态类型，这样可以增强代码可读性，也方便代码分析。</li>\n<li>没有指定类型的变量将会默认指定为dynamic类型</li>\n<li>Dart可以应用于前后端。比如可以开发客户端Web应用（Angular 2框架），同时也可以运行在服务端（借助DartVM）</li>\n<li>作为库，可能包含一个或多个*.dart文件</li>\n<li>在大多数情况下，所有的变量、方法和类等对外均可见，除非它们以“_”开头</li>\n<li>Dart提供两种运行模式：Production和Checked。默认情况下以Production方式运行，优先考虑性能，关闭类型检查和断言；而Checked模式更利于在开发阶段调试使用</li>\n<li>Dart支持顶级方法和顶级变量</li>\n<li>Dart代码分析工具可以指出警告和错误，错误分为编译错误和运行错误，编译错误会直接阻止代码运行，运行错误会在运行时抛出异常</li>\n<li>代码简单示例</li>\n</ol>\n<pre><code class=\"language-dart\">main(List&#x3C;String> args) {\n  print(\"Hello Dart!\");\n}\n</code></pre>\n<h1>变量</h1>\n<ol>\n<li>变量的初始化方法</li>\n</ol>\n<blockquote>\n<p>var name = \"XiaoWang\"\nprint(name)</p>\n</blockquote>\n<p>当然也可以使用String或dynamic类型，而不是用var类对name进行声明。\n对于局部变量，根据代码建议风格来说，优先建议使用var来声明变量。</p>\n<ol start=\"2\">\n<li>未经初始化的变量的默认值为null</li>\n</ol>\n<h1>常量</h1>\n<ol>\n<li>在Dart语言中，可以使用final或const关键字来声明一个常量</li>\n</ol>\n<blockquote>\n<p>final weight = 60.5\nfinal int height = 180\nconst int age = 17\nconst gender = \"male\"</p>\n</blockquote>\n<ol start=\"2\">\n<li>const声明的常量是一种编译时常量。const关键字也可以用来创建不变的值，甚至定义构造函数为const类型，即不可变对象，且任意变量都可以有一个不变的值。</li>\n</ol>\n<pre><code class=\"language-dart\">// 使用const创建常量值\nvar intList = const[];\nintList = [1, 2, 3];\n</code></pre>\n<p>虽然intList的值为常量不可变，但由于其本身声明使用了var，因此它仍然可以改变其引用。相当于：</p>\n<pre><code class=\"language-dart\">// 使用const创建常量值\nconst temp = [];\nvar intList_2 = temp;\nintList_2 = [1, 2, 3];\n</code></pre>\n<h1>基本数据类型</h1>\n<ol>\n<li>Dart的数值包含Int和Double两种类型。声明Double类型的变量，如果值是一个整数，则会自动转换成Double类型。</li>\n<li>字符串有单引号字符串和双引号字符串。有转义符，另外可以用加号连接字符串。还有三个单引号或双引号，可以保持大段文本的原格式。</li>\n</ol>\n<pre><code class=\"language-dart\">var userName = \"小刚\";\nfinal welcome = \"$userName，欢迎使用\";\nprint(welcome);\n</code></pre>\n<ol start=\"3\">\n<li>类型转换</li>\n</ol>\n<pre><code class=\"language-dart\">// String转换为int\nString s = \"1000\";\nint i = int.parse(s);\n\n// int转换为String\nint i = 1000;\nString s = i.toString();\n\n// 指定位数，输出3.14\nprint(3.14159.toStringAsFixed(2));\n</code></pre>\n<ol start=\"4\">\n<li>Dart提供三种核心集合类型：\n（1）列表List</li>\n</ol>\n<blockquote>\n<p>var listExp = [1, \"Hello\", 3.14]      // 列表中的元素可以混合不同类型\nprint(listExp.length)\nprint(\"长度为：\" + listExp.length.toString())</p>\n</blockquote>\n<p>（2）集合Set</p>\n<blockquote>\n<p>var setExp = {'A', 'B', 'C', 1, 2, 3}\n// 集合提供add()、remove()、contains()、clear()等方法\nsetExp.add('D')\nsetExp.remove('C')\nprint(setExp.contains(3))\nsetExp.clear()\n// 另外还有一次性追加多个二元素的addAll()方法，以及removeAll()方法和containsAll()方法。\n// 集合运算操作，有difference()、union()、intersection()等。</p>\n</blockquote>\n<p>（3）映射Map</p>\n<blockquote>\n<p>var mapExp = {\n\"a\" : \"aaa\",\n\"b\" : \"bbb\",\n};\n// 提供remove()方法和containsKey()判断，提供length()长度。</p>\n</blockquote>\n<ol start=\"5\">\n<li>Dart中的字符串是UTF-16编码的，对于超过的情况需要接入Runes类型。</li>\n<li>只有一个表达式的方法，可以简单写法成：</li>\n</ol>\n<blockquote>\n<p>int getInt() => 2 * getNumber();\n// 这里=>等同于return，称为箭头语法</p>\n</blockquote>\n<ol start=\"7\">\n<li>参数：必选参数和可选参数\n（1）在参数列表中，必选参数在最前面，可选参数随后。\n（2）参数在方法体中的引用方式需要使用$。\n（3）在Dart中，可选参数分为可选命名参数和基于位置的参数，二者是互斥关系，不能同时出现。</li>\n</ol>\n<pre><code class=\"language-dart\">// 可选命名参数示例：大括号\nint getPrice({bookName : \"一般图书\"}) {\n    if (bookName == \"热门图书\") {\n             return 50;\n        } else {\n            return 10;\n        }\n}\n\n// 可选位置参数示例：中括号\nString sayWelcome([String name = \"你好\"]) {\n    return   \"$name，欢迎使用\";\n}\n</code></pre>\n<ol start=\"8\">\n<li>主方法main方法返回void（即无返回值），有一个可选的参数List<String>。</li>\n<li>检查两个方法是否相等，使用连等号（==）来判断。</li>\n<li>在Dart中，如果一个方法没有声明返回类型和return语句，则默认为return null。</li>\n<li>在Dart中，做除法无法整除时，会返回小数。如果只想要整数部分，可以使用“~/”。</li>\n</ol>\n<blockquote>\n<p>print(9 ~/2);</p>\n</blockquote>\n<ol start=\"12\">\n<li>如果两个对象均返回null，即使其类型不同，但其值相同，也是相等的。</li>\n<li>类型判定运算符\n(1) as    类型转换\n(2) is    是指定类型\n(3) is!   非指定类型</li>\n<li>级联运算符\n(1) 本质是一个特殊语法\n(2) 写法是两个点，用于在同一对象上的连续调用\n示例如：</li>\n</ol>\n<pre><code class=\"language-dart\">// 原始写法\nPoint pExp = new Point();\npExp.setX(10);\npExp.setY(20);\npExp.setZ(30);\nprint(pExp.toString());\n\n// 级联写法\nprint(new Point()..setX(10)..setY(20)..setZ(30)..toString())\n</code></pre>\n<ol start=\"15\">\n<li>条件成员访问运算符</li>\n</ol>\n<blockquote>\n<p>?.    如果左边的对象不是null，则返回右边的值；反之则返回null</p>\n</blockquote>\n<ol start=\"16\">\n<li>断言只在开发模式下起作用，在生产环境中无效。断言可以检查程序中某些可能出现的运行逻辑错误。</li>\n</ol>\n<pre><code class=\"language-dart\">var intValue = 1000;\nassert(intValue == 999);    // 开发环境中看到控制台报错，在生产环境中不会收到提示\n</code></pre>\n<ol start=\"17\">\n<li>异常\n(1) Dart语言提供了 Exception 和 Error 两类异常。还有它们的子类，还可以自定义异常类型，其中自定义的异常类型不能为空值。</li>\n</ol>\n<pre><code class=\"language-dart\">throw new FormatException(\"Data format exception occurred\");\n// 抛出一个自定义的异常\nthrow 'custom exception';\n</code></pre>\n<p>(2) 在实际生产环境中，自定义异常通常的做法是写一个类，声明Error或Exception类中的方法。</p>\n<ol start=\"18\">\n<li>Catch</li>\n</ol>\n<pre><code class=\"language-dart\">try {\n    // xxxxx\n} catch (e) {\n    print(e.toString());\n    // yyyyy\n}\n\n// 捕捉不同的多种类型异常\ntry {\n} on RangeError {\n} on FormatError {\n} catch(e) {\n}\n\n// 再次抛出异常使用rethrow\ntry {\n} on RangeError {\n    // xxxxx\n    rethrow;\n} catch (e) {\n}\n</code></pre>\n<ol start=\"19\">\n<li>Finally</li>\n</ol>\n<pre><code class=\"language-dart\">try {\n} catch (e) {\n} finally {\n    print(\"done\");\n}\n</code></pre>\n","date":"2020-11-09","title":"Flutter Dart语言基础"},"prevPost":{"summary":null,"tags":["生活"],"id":"annual-goals","title":"年度目标","date":"2021-01-01"},"nextPost":{"summary":null,"tags":["Flutter"],"id":"flutter-start","title":"Flutter开发环境","date":"2020-10-28"}},"__N_SSG":true}