{"pageProps":{"post":{"summary":null,"tags":["Golang"],"id":"go-struct-tag-label","contentHtml":"<h1>struct 的 Tag 示例</h1>\n<pre><code class=\"language-go\">type Person struct {\n    Name string `json:\"name\"`\n    Age  int    `json:\"age\"`\n    Addr string `json:\"addr,omitempty\"`\n}\n</code></pre>\n<h1>如何获取 Tag 的信息</h1>\n<p>获取 Tag 可以分为三个步骤：</p>\n<ol>\n<li>获取字段 field</li>\n<li>获取标签 tag</li>\n<li>获取键值对 key:value</li>\n</ol>\n<h2>获取 Tag 的示例</h2>\n<pre><code class=\"language-go\">// 三种方式可获取 field\nfield := reflect.TypeOf(obj).FieldByName(\"Name\")\nfield := reflect.ValueOf(obj).Type().Field(i)   // i 表示第几个字段\nfield := reflect.ValueOf(&#x26;obj).Elem().Type().Field(i)   // i 表示第几个字段\n\n// 获取 Tag\ntag := field.Tag \n\n// 获取键值对\nlabelValue := tag.Get(\"label\")\nlabelValue,ok := tag.Lookup(\"label\")\n</code></pre>\n<ol>\n<li>获取键值对，有 Get 和 Lookup 两种方法。但其实 Get 只是对 Lookup 函数的简单封装而已，当没有获取到对应 tag 的内容时，会返回空字符串。</li>\n<li>空 Tag 和不设置 Tag 效果是一样的。</li>\n</ol>\n<h1>单元示例</h1>\n<pre><code class=\"language-go\">func Print(obj interface{}) error {\n    // 取 Value\n    v := reflect.ValueOf(obj)\n\n    // 解析字段\n    for i := 0; i &#x3C; v.NumField(); i++ {\n\n        // 取tag\n        field := v.Type().Field(i)\n        tag := field.Tag\n\n        // 解析label 和 default\n        label := tag.Get(\"label\")\n        defaultValue := tag.Get(\"default\")\n\n        value := fmt.Sprintf(\"%v\", v.Field(i))\n        if value == \"\" {\n            // 如果没有指定值，则用默认值替代\n            value = defaultValue\n        }\n\n        fmt.Println(label + value)\n    }\n\n    return nil\n}\n</code></pre>\n","date":"2016-07-29","title":"Go结构体里的Tag标签"},"prevPost":{"summary":null,"tags":["Golang"],"id":"go-sync-usage","title":"Go语言sync同步包使用","date":"2016-08-10"},"nextPost":{"summary":null,"tags":["MySQL"],"id":"postgresql-intro","title":"PostgreSQL 简介","date":"2016-07-06"}},"__N_SSG":true}