{"pageProps":{"post":{"summary":null,"tags":["PHP","HTTP"],"id":"php-curl-multi-http-request","contentHtml":"<p>此篇介绍一下php的curl_multi系列函数，用于批量发送http请求。</p>\n<!-- more -->\n<h2>curl_multi原理</h2>\n<p>注意：CURL在PHP中的多线程处理其实并不是真正的多线程，而是用单线程批处理模拟的多线程效果。</p>\n<h2>curl_multi使用步骤</h2>\n<p>使用curl_multi的步骤总结如下：</p>\n<ol>\n<li>调用curl_multi_init</li>\n<li>循环调用curl_multi_add_handle，这里需要注意的是，curl_multi_add_handle的第二个参数是由curl_init而来的子handle</li>\n<li>持续调用curl_multi_exec</li>\n<li>根据需要循环调用curl_multi_getcontent获取结果</li>\n<li>调用curl_multi_remove_handle，并为每个子handle调用curl_close</li>\n<li>调用curl_multi_close</li>\n</ol>\n<h2>各函数作用解释</h2>\n<ol>\n<li>\n<p>curl_multi_init()\n初始化一个curl批处理句柄资源。</p>\n</li>\n<li>\n<p>curl_multi_add_handle()\n向curl批处理会话中添加单独的curl句柄资源。\ncurl_multi_add_handle()函数有两个参数，第一个参数表示一个curl批处理句柄资源，第二个参数表示一个单独的curl句柄资源。</p>\n</li>\n<li>\n<p>curl_multi_exec()\n解析一个curl批处理句柄，curl_multi_exec()函数有两个参数，第一个参数表示一个批处理句柄资源，第二个参数是一个引用值的参数，表示剩余需要处理的单个的curl句柄资源数量。</p>\n</li>\n<li>\n<p>curl_multi_remove_handle()\n移除curl批处理句柄资源中的某个句柄资源，curl_multi_remove_handle()函数有两个参数，第一个参数表示一个curl批处理句柄资源，第二个参数表示一个单独的curl句柄资源。</p>\n</li>\n<li>\n<p>curl_multi_close()\n关闭一个批处理句柄资源。</p>\n</li>\n<li>\n<p>curl_multi_getcontent()\n在设置了CURLOPT_RETURNTRANSFER的情况下，返回获取的输出的文本流。</p>\n</li>\n<li>\n<p>curl_multi_info_read()\n获取当前解析的curl的相关传输信息。</p>\n</li>\n</ol>\n<h2>示例代码</h2>\n<pre><code class=\"language-php\">&#x3C;?php\n$start_time = microtime(true);\necho \"\\n\";\n\n$k = 10;\nwhile ($k > 0) {\n\t$urls[] = \"http://127.0.0.1:8080\";\n\t$k = $k - 1;\n}\n\nprint_r(async_get_urls($urls));\necho \"\\n\";\n\n$end_time = microtime(true);\necho $end_time - $start_time;\necho \"\\n\";\n\nfunction async_get_urls($urls)\n{\n\tif (!is_array($urls))\n\t\treturn false;\n\n    $result = [];\n    $handle = [];\n    $active = 0;\n    $mh = curl_multi_init();  // 初始化一个curl批处理句柄资源\n    \n    foreach($urls as $i => $url) {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  // 返回而非输出\n        curl_setopt($ch, CURLOPT_TIMEOUT, 1);  // 控制每一个请求的超时时间\n        /*\n        // POST的数据\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postParams);\n        */\n\n        curl_multi_add_handle($mh, $ch); // 向curl批处理会话中添加单独的curl句柄资源\n        $handle[$i] = $ch;\n    }\n\n    // 执行\n    /* curl_multi_exec在底层调用了libcurl的curl_multi_perform函数。\n    在curl7.20.0以前，此函数会返回一个CURLM_CALL_MULTI_PERFORM值，代表它希望立刻再一次被调用。所以就有了检查此返回值，再一次调用curl_multi_exec函数的demo。\n    在7.20.0之后，libcurl把这个工作自己在内部做了，所以就不用应用端再做了，直接调用curl_multi_exec，只检查$still_running参数就行了。但此种用法要注意用usleep或者select优化，避免造成cpu占用过高出现假死 */\n    /*\n    do {\n        curl_multi_exec($mh, $running); // 第二个参数表示剩余需要处理的单个curl句柄资源数量\n        usleep(250000); // 250000 = 0.25 sec\n    } while ($running > 0);\n    */\n    \n    do {\n            $mrc = curl_multi_exec($mh, $active);\n        } while ($mrc == CURLM_CALL_MULTI_PERFORM);  // CURLM_CALL_MULTI_PERFORM (-1)：这意味着你需要再次调用curl_multi_exec()，因为仍有数据可供处理\n    \n    while ($active &#x26;&#x26; $mrc == CURLM_OK) {  // CURLM_OK(0)：如文档中所说：“都好了”。这意味着可能有更多的数据，但还没有到。\n            if (curl_multi_select($mh) != -1) {\n                do {\n                    $mrc = curl_multi_exec($mh, $active);\n                } while ($mrc == CURLM_CALL_MULTI_PERFORM);\n            }\n        }\n\n    // 读取结果\n    foreach($handle as $i => $ch) {\n    \t$content['total_time'] = curl_getinfo($ch)['total_time'];\n        $content['error'] = curl_error($ch);\n        $content['data']  = json_decode(curl_multi_getcontent($ch), true);\n        $result[$i] = (curl_errno($ch) == 0) ? $content : false;\n    }\n\n    // 移除handle\n    foreach($handle as $ch) {\n        curl_multi_remove_handle($mh, $ch);  // 移除curl批处理句柄资源中的某个句柄资源\n    }\n\n    curl_multi_close($mh);  // 关闭批处理句柄资源\n\n    return $result;\n}\n</code></pre>\n","date":"2010-07-05T10:13:08.000Z","title":"PHP的curl_multi批量发送http请求","published":true,"hideInList":false,"feature":null,"isTop":false},"prevPost":{"summary":null,"tags":["Redis"],"id":"redis-client-list-info","title":"Redis的客户端连接数验证","date":"2010-07-07T14:20:50.000Z","published":true,"hideInList":false,"feature":null,"isTop":false},"nextPost":{"summary":null,"tags":["PHP"],"id":"php-configuration-and-tips","title":"PHP常见配置及使用技巧","date":"2010-07-02T10:15:01.000Z","published":true,"hideInList":false,"feature":null,"isTop":false}},"__N_SSG":true}