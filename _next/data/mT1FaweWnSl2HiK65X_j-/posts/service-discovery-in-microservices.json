{"pageProps":{"post":{"summary":null,"tags":["微服务"],"id":"service-discovery-in-microservices","contentHtml":"<p>此篇文章介绍下关于服务发现的一些技术。</p>\n<!-- more -->\n<h2>什么是服务发现</h2>\n<p>服务发现（Service Discovery）要解决的是分布式系统中最常见的问题之一，即在同一个分布式集群中的进程或服务如何才能找到对方并建立连接。</p>\n<h2>服务发现的特点</h2>\n<ul>\n<li>动态变化是微服务应用的一大特点。在动态环境下，必须有一种机制能让client知道如何访问其它的服务，这就是服务发现技术的工作。</li>\n<li>服务发现会保存集群中所有微服务最新的信息，比如IP和端口，并对外提供API，提供服务查询功能。</li>\n<li>Etcd、Consul、Eureka 和 ZooKeeper 是服务发现/注册的典型解决方案。</li>\n</ul>\n<h2>如何实现服务发现机制</h2>\n<p>要解决服务发现的问题，需要三方面的支持：</p>\n<ol>\n<li>\n<p>一个强一致性、高可用的服务存储目录\n如基于Raft的Etcd服务。</p>\n</li>\n<li>\n<p>一种注册服务和监控服务健康状态的机制\n用户可以在Etcd中注册服务，并且对注册的服务设置key TTL，定时保持服务的心跳以达到监控健康状态的效果。</p>\n</li>\n<li>\n<p>一种查找和连接服务的机制\n通过在Etcd指定的主题下注册的服务也能在对应的主题下查找到。为了确保连接，可以在每个服务器上部署一个proxy模式的Etcd，这样就可以确保能访问Etcd集群的服务都能互相连接。</p>\n</li>\n</ol>\n","date":"2017-10-18T17:28:15.000Z","title":"微服务中的服务发现","published":true,"hideInList":false,"feature":null,"isTop":false},"prevPost":{"summary":null,"tags":["Golang"],"id":"golang-conditional-compilation-and-cross-compilation","title":"Go程序的条件编译和交叉编译","date":"2017-10-28T12:03:50.000Z","published":true,"hideInList":false,"feature":null,"isTop":false},"nextPost":{"summary":null,"tags":["PHP"],"id":"modern-php-reading-notes","title":"《Modern PHP》阅读笔记","date":"2017-10-03T10:00:00.000Z","published":true,"hideInList":false,"feature":null,"isTop":false}},"__N_SSG":true}