{"pageProps":{"post":{"summary":null,"tags":["HTTP"],"id":"cross-origin-problem","contentHtml":"<p>介绍一下跨域相关的内容。</p>\n<h1>同源策略（same-origin policy）</h1>\n<ol>\n<li>浏览器有一种同源策略，是一种安全机制。</li>\n<li>同源：<strong>域名、协议、端口</strong>三者都相同则为同源，否则认为是跨域。</li>\n</ol>\n<pre><code>（1）同一个域名下的不同uri，同源。\n（2）http和https，不同源。\n（3）端口号不同，不同源。\n（4）域名和其ip，不同源。\n（5）不同二级子域（如www和其它），不同源。\n（6）不同域名，不同源。\n</code></pre>\n<ol start=\"3\">\n<li>简单来讲，同源策略就是浏览器为了保证用户信息的安全，防止恶意的网站窃取数据，禁止不同域之间的JS进行交互。</li>\n</ol>\n<h1>解决跨域问题的方式</h1>\n<h2>跨域资源共享（CORS）</h2>\n<ol>\n<li>CROS，全称是跨域资源共享 (Cross-origin resource sharing)，它的提出就是为了解决跨域请求的。</li>\n<li>可以从nginx层进行支持跨域配置</li>\n</ol>\n<pre><code>location / { \n add_header Access-Control-Allow-Origin *;\n add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';\n\n if ($request_method = 'OPTIONS') {\n return 204;\n }\n}\n</code></pre>\n<h2>预检请求（preflight request）</h2>\n<blockquote>\n<p>跨域资源共享(CORS)标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。</p>\n</blockquote>\n<ol>\n<li>Content-Type不属于以下MIME类型的，都属于预检请求：</li>\n</ol>\n<pre><code>application/x-www-form-urlencodedmultipart/form-datatext/plain\n</code></pre>\n<ol start=\"2\">\n<li>application/json的请求会在正式通信之前，增加一次\"预检\"请求，这次\"预检\"请求会带上头部信息 Access-Control-Request-Headers中的字段。</li>\n<li>服务器回应时，返回的头部信息如果不包含Access-Control-Allow-Headers字段则表示不接受非默认的字段信息。</li>\n</ol>\n<h1>Go语言的Gin框架跨域中间件</h1>\n<pre><code>package middlewares\nimport (\n \"github.com/gin-gonic/gin\"\n)\n\n// 处理跨域请求,支持options访问\nfunc Cors() gin.HandlerFunc {\n return func(c *gin.Context) {\n method := c.Request.Method\n c.Header(\"Content-Type\", \"text/html;charset=utf-8\")\n c.Header(\"Access-Control-Allow-Origin\", \"*\")\n c.Header(\"Access-Control-Allow-Methods\", \"POST,GET,OPTIONS,DELETE\")\n c.Header(\"Access-Control-Expose-Headers\", \"Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type\")\n c.Header(\"Access-Control-Allow-Credentials\", \"true\")\n c.Header(\"Access-Control-Allow-Headers\", \"Content-Type,Content-Length,Accept-Encoding,X-Requested-with, Origin\") // 设置允许自定义请求头的字段\n \n //放行所有OPTIONS方法\n if method == \"OPTIONS\" {\n c.JSON(200, gin.H{})\n c.Abort()\n }\n\n // 处理请求\n c.Next()\n }\n}\n</code></pre>\n<p>然后在main函数中，注册中间件：</p>\n<pre><code>// 加载自定义中间件\n r.Use(middlewares.Cors()) //允许跨域\n</code></pre>\n","date":"2016-02-19T10:00:00.000Z","title":"跨域问题","published":true,"hideInList":false,"feature":null,"isTop":false},"prevPost":{"summary":null,"tags":["Golang"],"id":"golang-concurrent-programming-practices","title":"Go并发编程实践","date":"2016-05-02T10:00:00.000Z","published":true,"hideInList":false,"feature":null,"isTop":false},"nextPost":{"summary":null,"tags":["Golang"],"id":"goroutine-concurrency-control","title":"goroutine的并发控制channel/waitgroup/context","date":"2016-02-17T10:00:00.000Z","published":true,"hideInList":false,"feature":null,"isTop":false}},"__N_SSG":true}