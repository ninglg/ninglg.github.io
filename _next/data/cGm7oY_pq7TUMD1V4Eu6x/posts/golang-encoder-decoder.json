{"pageProps":{"post":{"summary":null,"tags":["Golang"],"id":"golang-encoder-decoder","contentHtml":"<p>Go语言常用到的几种编解码器</p>\n<!-- more -->\n<h1>编解码器</h1>\n<pre><code class=\"language-txt\">base64\ngob\n\njson\nthrift\nmsgpack\nprotobuf\n\ngencode\n</code></pre>\n<h1>base64</h1>\n<p>示例代码如下：</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t\"encoding/base64\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tmsg := \"Hello, 世界\"\n\tencoded := base64.StdEncoding.EncodeToString([]byte(msg))\n\tfmt.Println(\"base64 encode: \", encoded)\n\tdecoded, err := base64.StdEncoding.DecodeString(encoded)\n\tif err != nil {\n\t\tfmt.Println(\"base64 decode error: \", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"base64 decode: \", string(decoded))\n}\n</code></pre>\n<p>输出结果如下：</p>\n<pre><code class=\"language-txt\">base64 encode:  SGVsbG8sIOS4lueVjA==\nbase64 decode:  Hello, 世界\n</code></pre>\n<h1>json</h1>\n<p>示例代码如下：</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\tp := Person{\n\t\tName: \"xiaoming\",\n\t\tAge:  16,\n\t}\n\n\tret, _ := json.Marshal(p)\n\tfmt.Println(string(ret))\n\n\tpp := Person{}\n\t_ = json.Unmarshal(ret, &#x26;pp)\n\tfmt.Printf(\"%+v\", pp)\n\n}\n</code></pre>\n<p>输出结果如下：</p>\n<pre><code class=\"language-txt\">{\"name\":\"xiaoming\",\"age\":16}\n{Name:xiaoming Age:16}\n</code></pre>\n<h1>gob（Go binary）</h1>\n<p>示例代码如下：</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"fmt\"\n\t\"log\"\n)\n\ntype P struct {\n\tX, Y, Z int\n\tName    string\n}\n\ntype Q struct {\n\tX, Y *int32\n\tName string\n}\n\nfunc main() {\n\tbuf := new(bytes.Buffer)\n\tenc := gob.NewEncoder(buf)\n\tdec := gob.NewDecoder(buf)\n\t// Encode (send) the value.\n\terr := enc.Encode(P{3, 4, 5, \"Pythagoras\"})\n\tif err != nil {\n\t\tlog.Fatal(\"encode error:\", err)\n\t}\n\tfmt.Println(buf.Bytes())\n\n\t// Decode (receive) the value.\n\tvar q Q\n\terr = dec.Decode(&#x26;q)\n\tif err != nil {\n\t\tlog.Fatal(\"decode error:\", err)\n\t}\n\n\tfmt.Printf(\"%q: {%d,%d}\\n\", q.Name, *q.X, *q.Y)\n}\n</code></pre>\n<p>输出结果如下：</p>\n<pre><code class=\"language-txt\">[42 255 129 3 1 1 1 80 1 255 130 0 1 4 1 1 88 1 4 0 1 1 89 1 4 0 1 1 90 1 4 0 1 4 78 97 109 101 1 12 0 0 0 21 255 130 1 6 1 8 1 10 1 10 80 121 116 104 97 103 111 114 97 115 0]\n\"Pythagoras\": {3,4}\n</code></pre>\n<h1>msgpack</h1>\n<p>示例代码如下：</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/vmihailenco/msgpack\"\n)\n\ntype Person struct {\n\tName   string\n\tAge    int\n\tGender string\n}\n\nfunc main() {\n\tp1 := Person{\n\t\tName:   \"xiaoming\",\n\t\tAge:    16,\n\t\tGender: \"M\",\n\t}\n\n\t// marshal\n\tb, err := msgpack.Marshal(p1)\n\tif err != nil {\n\t\tfmt.Printf(\"msgpack marshal failed, err:%v\", err)\n\t\treturn\n\t}\n\n\t// unmarshal\n\tvar p2 Person\n\terr = msgpack.Unmarshal(b, &#x26;p2)\n\tif err != nil {\n\t\tfmt.Printf(\"msgpack unmarshal failed, err:%v\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"p2:%#v\\n\", p2)\n}\n</code></pre>\n<p>输出结果如下：</p>\n<pre><code class=\"language-txt\">p2:main.Person{Name:\"xiaoming\", Age:16, Gender:\"M\"}\n</code></pre>\n<h1>protobuf</h1>\n<p>#gencode\n<a href=\"https://github.com/andyleap/gencode\">andyleap/gencode</a></p>\n<h1>字符串格式化常用功能</h1>\n<table>\n<thead>\n<tr>\n<th>格式化</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%v</td>\n<td>按值的本来值输出</td>\n</tr>\n<tr>\n<td>%+v</td>\n<td>在 %v 基础上，对结构体字段名和值进行展开</td>\n</tr>\n<tr>\n<td>%#v</td>\n<td>输出 Go 语言语法格式的值</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>输出 Go 语言语法格式的类型和值</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>输出 % 本体</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>整型以二进制方式显示</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>整型以八进制方式显示</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>整型以十进制方式显示</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>整型以十六进制方式显示</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>整型以十六进制、字母大写方式显示</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>Unicode 字符</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>指针，十六进制方式显示</td>\n</tr>\n</tbody>\n</table>\n<h1>性能测试结果</h1>\n<p>由快到慢：gencode、msgpack、protobuf、json、xml</p>\n","date":"2017-01-20T00:00:00.000Z","title":"Go语言的常用编解码器（序列化/反序列化）"},"prevPost":{"summary":null,"tags":["大数据"],"id":"hive-hbase-in-bigdata","title":"Hive和HBase在大数据中的应用场景","date":"2017-02-15T00:00:00.000Z"},"nextPost":{"summary":null,"tags":["Golang"],"id":"reduce-golang-executable-program-size","title":"减小Go代码编译后可执行程序的体积","date":"2017-01-02T00:00:00.000Z"}},"__N_SSG":true}