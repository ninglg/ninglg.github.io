{"pageProps":{"post":{"summary":null,"tags":["微服务"],"id":"microservice-domain-driven-design","contentHtml":"<p>领域驱动设计（DDD）和微服务拆分</p>\n<!-- more -->\n<p>DDD 全称 Domain-Driven Design（领域驱动设计），是一套应对复杂软件系统分析和设计的面向对象建模方法论。</p>\n<blockquote>\n<p>高内聚，低耦合。\n有 DDD 的指导，加上微服务的事件，才是完美的架构。（因为微服务的侧重点是治理，而不是拆分。）</p>\n</blockquote>\n<h1>聚合</h1>\n<p>聚合是一个或多个实体的集合，也可能包含值对象。\n集合的父实体被称为聚合根（Aggregate Root）。</p>\n<h1>值对象</h1>\n<p>值对象与实体的区别在于值对象是不可变的，并且没有唯一的标识，仅由其属性的值所定义。</p>\n<h1>实体</h1>\n<p>实体是具有惟一标识符的潜在可变对象，在其域模型中有自己的生命周期，能够获得该实体完整状态转换历史。</p>\n<blockquote>\n<p>例如，在电子商务领域，可以定义一个命名为 Order 的聚合，包含 Address（值对象）和 Consumer（实体）。</p>\n</blockquote>\n<h1>设计领域模型的一般步骤</h1>\n<ol>\n<li>根据需求划分出初步的领域和限界上下文，以及上下文之间的关系；</li>\n<li>进一步分析每个上下文内部，识别出哪些是实体，哪些是值对象；</li>\n<li>对实体、值对象进行关联和聚合，划分出聚合的范畴和聚合根；</li>\n<li>为聚合根设计仓储，并思考实体或值对象的创建方式；</li>\n<li>在工程中实践领域模型，并在实践中检验模型的合理性，倒推模型中不足的地方并重构。</li>\n</ol>\n<h1>模式举例</h1>\n<h2>1. 贫血模型</h2>\n<p>Domain Object 包含了不依赖于持久化的领域逻辑，而那些依赖持久化的领域逻辑被分离到 Service 层。</p>\n<h2>2. 充血模型</h2>\n<p>将绝大多数业务逻辑放到 Domain 中，Service 是很薄的一层，封装少量业务逻辑，并且不和 DAO 打交道。</p>\n","date":"2017-05-17T00:00:00.000Z","title":"领域驱动设计（DDD）和微服务拆分"},"prevPost":{"summary":null,"tags":["生活"],"id":"expedition-for-freedom","title":"为自由而探险","date":"2017-06-08T00:00:00.000Z"},"nextPost":{"summary":null,"tags":["MySQL"],"id":"mac-brew-install-mysql-5.7","title":"在Mac上通过brew安装指定版本的MySQL","date":"2017-04-03T00:00:00.000Z"}},"__N_SSG":true}