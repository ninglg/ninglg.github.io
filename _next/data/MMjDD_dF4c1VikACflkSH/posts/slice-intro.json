{"pageProps":{"post":{"summary":null,"tags":["Golang"],"id":"slice-intro","contentHtml":"<p>Go源码分析：slice</p>\n<h1>基础使用</h1>\n<ol>\n<li>make可以指定slice的初始len和cap。</li>\n<li>在创建slice时，如果切片发生了逃逸或者非常大，运行时需要runtime.makeslice在堆中初始化切片；如果切片不会发生逃逸并且非常小，make会被直接转换成先创建数组再通过下标切片的生成方式（此时编译器会在栈上或者静态存储区创建数组）。</li>\n</ol>\n<h1>切片扩容</h1>\n<blockquote>\n<p>1、如果期望的容量大于当前容量的2倍，则直接使用期望容量；\n2、如果当前切片的长度小于1024，就会将容量翻倍；\n3、如果当前切片的长度大于1024，就会每次增加25%的容量，直到新容量大于期望容量；\n4、在确定切片的大致容量之后，还需要根据切片中的元素大小进行对齐内存。</p>\n</blockquote>\n","date":"2015-03-08","title":"Go源码分析：slice"},"prevPost":{"summary":null,"tags":["Golang"],"id":"map-intro","title":"Go源码分析：map","date":"2015-03-10"},"nextPost":{"summary":null,"tags":["Golang"],"id":"golang-key-points","title":"Go语言核心要点","date":"2014-12-17"}},"__N_SSG":true}