{"pageProps":{"post":{"summary":null,"tags":["Redis"],"id":"how-redis-implement-high-performance","contentHtml":"<p>此篇主要介绍下Redis是如何实现的高性能。</p>\n<!-- more -->\n<p>我们知道，Redis是一个提供了众多数据结构和特性，并且可以达到10w+qps的高性能NoSQL数据库。那么，它是如何做到高性能的呢？</p>\n<h2>开发语言</h2>\n<p>基于C语言实现，执行效率因素。</p>\n<h2>纯内存访问</h2>\n<p>Redis将所有数据放在内存中，除特殊场景外一般无需访问磁盘，减少了磁盘IO。</p>\n<h2>单线程</h2>\n<ul>\n<li>\n<p>实现简单，避免了线程切换以及加锁释放锁带来的性能消耗。当然，单线程也有阻塞的缺点，需要避免执行耗时过长的命令。</p>\n</li>\n<li>\n<p>除了Redis之外，Node.js和Nginx也都是单线程高性能服务的典范。</p>\n</li>\n</ul>\n<h2>非阻塞多路I/O复用机制(multiplexing)</h2>\n<p>Redis使用epoll作为I/O多路复用技术的实现，加上Redis自身的事件处理模型将epoll的read、write、close等都转换成事件，不在网络I/O上浪费过多的时间，从而实现对多个文件描述符（File Descriptor，FD）读写的监控，提高了性能。</p>\n<h2>多路复用函数库</h2>\n<ol>\n<li>Redis的I/O多路复用机制，还提供了select、epoll（Linux）、evport（Solaries）、kqueue（macOS/FreeBSD）等多路复用函数库，根据编译平台的不同可以选择不同的库。</li>\n<li>除了select方式的时间复杂度为O(N)外，其它几种均为O(1)。</li>\n</ol>\n","date":"2017-12-06T00:00:00.000Z","title":"Redis如何实现的高性能"},"prevPost":{"summary":null,"tags":["操作系统"],"id":"deadlock-question","title":"死锁的问题","date":"2017-12-16T00:00:00.000Z"},"nextPost":{"summary":null,"tags":["Kafka"],"id":"talk-about-message-queue","title":"浅谈消息队列（Kafka、RabbitMQ、RocketMQ等）","date":"2017-11-30T00:00:00.000Z"}},"__N_SSG":true}